Информация ниже относится к примерам приведённым в классе REAL_EVENT:

1.EVENTS --  это делегаты 
2.Как и в обычных делегатах есть обобщающие делегаты : ACTION or FUNC or PREDICATE
	Так и в делегатах типа EVENT есть обобщающий делегат и он EventHendler;
3.Этот делегат получает два параметра :
	1) object - кто был причиной события которое случилось и задействовало делегат
	2) EventArgs - он служит для передачи параметров ф-ции:
		а. Прежде всего EventArgs - это внутрений класс, кот изначально определён в .NET. Это пустой класс в котором есть только 
			одно поле (public static readonly EventArgs Empty;) и его конструктор (public EventArgs();)
    3) Этот делегат не может знать все типы полей которые он должен будет передать записаным в него ф-циям 
		при возникновении того или иного события.
		Поэтому чтобы можно было передать через него параметры нужно создать отдельный класс, который будет наследовать от внутреннего
		класса .NET имя которого EventArgs .
		
		Пример из класса REAL_EVENT:

					public class VideoEncoderEventArgs : EventArgs
					{
						public string VideoName { get; set; }
					}

4.Делегат EventHandler - это не обычный делегат. С обычным делегатом мы можем через объект класса делать всё что угодно из любого места
	программы. Но с делегатом типа event ( public event EventHandler<VideoEncoderEventArgs> invocationMethodsList;) мы не можем делать
	д-вия типа:

			1) обнулить записаную в него инфу --> invocationMethodsList = null -- 
						или
            2)задействовать его --> invocationMethodsList.Invoke(null, new VideoEncoderEventArgs { VideoName = "bla bla bla)" })

	если они  находятся вне того класса в котором был создан этот делегат (в котором он был определён). 
	Это сделано для того чтобы "защитить" делегат типа event от нежелательных изменений каким-то пользователем.

**************************************************************************************************************************************

														27-01-21

**************************************************************************************************************************************
	1. Важно в названии делегата-события указать время когда он будет использован. К примеру:
		onLoaded - когда загрузка закончилась
		onLoading - в процессе окончания
	2. Events выполняются из ф-ций предназначеных для задействования EVENT-ов, т.е. мы не пишем EVENT в функции в которой требуется
		выполнение этого EVENT-а, а обращаемся из этой ф-ции к ф-ции которая конкретно создана для данного EVENT-а.
		Пример из Bank.cs:
		// Ф-ция которая создана только для обращения к EVENT-у, передачу ему требуемых параметров и проверки его на null (подписаляс
		     ли кто-то на него вообще или нет)

			 public void PassedTheMillionBanace(Customer c)
				{
					if (PassedMillion != null)
					{
						PassedMillion(this, new PersonDetailsEventArgs
						{
							MobileNumber = c.MobileNumber,
							Name = c.Name
						});
					}
				}

		// Ф-ция которой требуется задействовать EVENT находящийся в ф-ции public void PassedTheMillionBanace(Customer c) приведёной
			выше:

			public void Deposite(Customer c, double amount)
				{
					c.Balance += amount;
					if (c.Balance > 1_000_000 && !c.GotPriceForOver1M)
					{
						// Passed the 1M
						PassedTheMillionBanace(c);
					}
				}